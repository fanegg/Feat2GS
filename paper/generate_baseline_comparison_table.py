# Disable Ruff's rules on star imports for common.
# ruff: noqa: F405, F403

from collections import defaultdict
from pathlib import Path

from common import *
from table import make_latex_table

OUT_PATH = Path("tables")

caption = f"{exp_name} vs InstantSplat"
# caption = "InstantSplat"

METHODS = (
    METHOD_FEAT2GS_DUST3R,
    METHOD_FEAT2GS_MAST3R,
    METHOD_FEAT2GS_MIDAS,
    METHOD_FEAT2GS_DINOV2,
    METHOD_FEAT2GS_DINO16,
    METHOD_FEAT2GS_SAM,
    METHOD_FEAT2GS_CLIP,
    METHOD_FEAT2GS_RADIO,
    METHOD_FEAT2GS_MAE,
    METHOD_FEAT2GS_DIFT,
    METHOD_FEAT2GS_IUVRGB,
    METHOD_INSTANTSPLAT,
)

METRICS = (
    METRIC_PSNR,
    METRIC_SSIM,
    METRIC_LPIPS,
)

SCENES = (
    (*SCENES_LLFF, *SCENES_DL3DV), 
    (*SCENES_CASUAL, *SCENES_MIPNERF360),
    (*SCENES_MVIMGNET, *SCENES_TANDT)
)




if __name__ == "__main__":
    chunks = []
    chunks_id = 0
    for row_scenes in SCENES:
        chunks_id += 1
        df = load_metrics(row_scenes, METHODS, METRICS)
        row_datasets = tuple(set(scene.dataset for scene in row_scenes))

        grouped = df.groupby(["dataset_tag", "metric_tag", "method_tag"])[
            "metric_value"
        ].mean()

        rows = defaultdict(list)
        multi_headers = []
        for dataset in row_datasets:
            num_scenes = sum([scene.dataset.tag == dataset.tag for scene in row_scenes])
            multi_headers.append(
                (f"{dataset.full_name} ({num_scenes} scenes)", len(METRICS))
            )
            for method in METHODS:
                for metric in METRICS:
                    rows[f"{method.full_name}"].append(
                        grouped[dataset.tag][metric.tag][method.tag]
                    )

        table, table_begin, table_end = make_latex_table(
            rows,
            [metric.full_name for metric in METRICS] * len(row_datasets),
            [2, 4, 4] * len(row_datasets),
            [metric.order for metric in METRICS] * len(row_datasets),
            multi_headers=multi_headers,
        )

        chunks.append(table)

        if chunks_id < (len(SCENES)):
            chunks += ["\\midrule",]


    table_begin = [
        "%%% BEGIN AUTOGENERATED %%%",
        "\\setlength{\\tabcolsep}{8pt}",
        "\\begin{table*}[t]",
        "\\setlength{\\tabcolsep}{4pt}",
        "\\centering",
        "\\resizebox{\\textwidth}{!}{",
    ] + table_begin

    table_end = table_end + [
        "}",
        "\\vspace{5pt}",
        f"\\caption{{{caption}}}",
        "\\label{tab:recon}",
        "\\vspace{-11pt}",
        "\\end{table*}",
        "%%% END AUTOGENERATED %%%",
    ]

    chunks = table_begin + chunks + table_end
    caption = caption.replace(" ", "_")
    out_path = OUT_PATH / f"{caption}.tex"
    out_path.parent.mkdir(exist_ok=True, parents=True)
    with Path(out_path).open("w") as f:
        f.write("\n".join(chunks))