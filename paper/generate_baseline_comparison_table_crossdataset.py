# Disable Ruff's rules on star imports for common.
# ruff: noqa: F405, F403

from collections import defaultdict
from pathlib import Path

from common import *
from table import make_latex_table

OUT_PATH = Path("tables")

caption = "Comparison of Application"
# caption = f"{exp_name} vs InstantSplat cross dataset"
# caption = "InstantSplat cross dataset"
USE_COLORS=False

METHODS = (
    METHOD_INSTANTSPLAT,
    
    # METHOD_FEAT2GS_DUST3R,
    # METHOD_FEAT2GS_MAST3R,
    # METHOD_FEAT2GS_MIDAS,
    # METHOD_FEAT2GS_DINOV2,
    # METHOD_FEAT2GS_DINO16,
    # METHOD_FEAT2GS_SAM,
    # METHOD_FEAT2GS_CLIP,
    METHOD_FEAT2GS_RADIO,
    # METHOD_FEAT2GS_MAE,
    # METHOD_FEAT2GS_DIFT,
    # METHOD_FEAT2GS_IUVRGB,

    METHOD_ALL,
    METHOD_FEAT2GS_DUST3R_ft,
)

METRICS = (
    METRIC_PSNR,
    METRIC_SSIM,
    METRIC_LPIPS,
)

SCENES = (
    (*SCENES_CASUAL,),
    (*SCENES_DL3DV,),
    (*SCENES_LLFF,),
    (*SCENES_TANDT,),
    (*SCENES_MVIMGNET,), 
    (*SCENES_MIPNERF360,), 
)


if __name__ == "__main__":
    chunks = []

    df = load_metrics(sum(SCENES, ()), METHODS, METRICS)

    grouped = df.groupby(["metric_tag", "method_tag"])[
        "metric_value"
    ].mean()

    rows = defaultdict(list)
    multi_headers = []

    multi_headers.append(
        (f"All Datasets", len(METRICS))
    )
    for method in METHODS:
        for metric in METRICS:
            rows[f"{method.full_name}"].append(
                grouped[metric.tag][method.tag]
            )

    table, table_begin, table_end = make_latex_table(
        rows,
        [metric.full_name for metric in METRICS],
        [2, 4, 4],
        [metric.order for metric in METRICS],
        multi_headers=multi_headers,
        use_colors=USE_COLORS,
    )

    chunks.append(table)


    # table_begin = [
    #     "%%% BEGIN AUTOGENERATED %%%",
    #     "\\setlength{\\tabcolsep}{8pt}",
    #     "\\begin{table*}[t]",
    #     "\\setlength{\\tabcolsep}{4pt}",
    #     "\\centering",
    #     "\\resizebox{\\textwidth}{!}{",
    # ] + table_begin

    # table_end = table_end + [
    #     "}",
    #     f"\\caption{{{caption}}}",
    #     "\\label{tab:recon}",
    #     "\\end{table*}",
    #     "%%% END AUTOGENERATED %%%",
    # ]

    table_begin = [
        "%%% BEGIN AUTOGENERATED %%%",
        "\\setlength{\\tabcolsep}{4pt}",
        "\\begin{table}[t]", 
        "\\centering",
    ] + table_begin

    table_end = table_end + [
        f"\\caption{{{caption}}}",
        "\\label{tab:recon}",
        "\\end{table}",  
        "%%% END AUTOGENERATED %%%",
    ]


    chunks = table_begin + chunks + table_end
    caption = caption.replace(" ", "_")
    out_path = OUT_PATH / f"{caption}.tex"
    out_path.parent.mkdir(exist_ok=True, parents=True)
    with Path(out_path).open("w") as f:
        f.write("\n".join(chunks))